;;;; .emacs for Eric Kidd
;;;;

;;;; This file dates back to the fall of 1997, when I first started using
;;;; Emacs in earnest.  There's a lot of old cruft in here, and most of it
;;;; is probably of no interest to anyone but me.
;;;;
;;;; A note about credit: At the time of writing, this file is 11.5 years
;;;; old.  During that time, I've attempted to keep records of where the
;;;; code snippets in this file originated, but I've undoutably overlooked
;;;; several smaller snippets.  So please don't assume that anything in
;;;; this file is necessarily mine, at least not without asking me first.
;;;; And if you see some code which isn't properly credited, please let me
;;;; know, and I'll fix it.

;;;
;;; Notes
;;;
;;; On emacs-snapshot-gtk, the nicest font is misc 11x18.
;;;

;;;
;;; Automatically-Created Customizations
;;; Emacs sets these automatically for us. Use M-x customize
;;;
;;; These go at the top of the file so that we can override fonts in
;;; emk-os.
;;;

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(c-basic-offset 4)
 '(column-number-mode t)
 '(css-indent-offset 2)
 '(current-language-environment "UTF-8")
 '(display-time-mode t)
 '(emojify-composed-text-p t)
 '(ido-confirm-unique-completion t)
 '(ido-enable-dot-prefix t)
 '(ido-enable-flex-matching t)
 '(ido-mode (quote both) nil (ido))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(javascript-indent-level 2)
 '(langtool-language-tool-jar "/home/emk/bin/languagetool.jar")
 '(magit-commit-ask-to-stage t)
 '(magit-status-buffer-switch-function (quote switch-to-buffer))
 '(menu-bar-mode nil)
 '(ns-alternate-modifier (quote hyper))
 '(ns-command-modifier (quote meta))
 '(org-agenda-files
   (quote
    ("~/clients/faraday/faraday.org" "~/doc/org/work.org" "~/doc/org/hacking.org")))
 '(package-selected-packages
   (quote
    (yasnippet twittering-mode toml-mode ruby-electric ripgrep restclient racer python-mode purescript-mode projectile project-root phi-search pcre2el org-trello org multiple-cursors markdown-mode magit langtool kill-ring-search json-reformat js2-mode ido-better-flex hyde highlight hcl-mode handlebars-mode go-mode emojify elm-mode elixir-mode elixir-mix dockerfile-mode company column-enforce-mode cargo arduino-mode)))
 '(safe-local-variable-values
   (quote
    ((coq-prog-args "-emacs-U" "-I" "/home/emk/w/src/cpdt/src")
     (auto-fill-mode)
     (visual-line-mode . t)
     (require-final-newline)
     (eval progn
           (auto-fill-mode 0)
           (visual-line-mode 1))
     (nxml-child-indent . 4)
     (nxml-outline-child-indent . 4)
     (encoding . utf-8)
     (ruby-compilation-executable . "ruby")
     (ruby-compilation-executable . "ruby1.8")
     (ruby-compilation-executable . "ruby1.9")
     (ruby-compilation-executable . "rbx")
     (ruby-compilation-executable . "jruby"))))
 '(scss-compile-at-save nil)
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(whitespace-check-indent-whitespace nil)
 '(whitespace-global-mode nil nil (whitespace)))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 98 :width normal :foundry "unknown" :family "DejaVu Sans Mono"))))
 '(font-lock-comment-face ((((class color)) (:foreground "Firebrick"))))
 '(font-lock-function-name-face ((((class color)) (:foreground "DarkGreen"))))
 '(font-lock-reference-face ((((class color)) (:foreground "CadetBlue"))))
 '(font-lock-string-face ((((class color)) (:foreground "DarkGrey"))))
 '(font-lock-type-face ((((class color)) (:foreground "DarkOliveGreen"))))
 '(font-lock-variable-name-face ((((class color)) (:foreground "DarkGreen"))))
 '(mmm-default-submode-face ((t (:background "ivory2")))))

;;;
;;; Load Path Setup
;;;

(defvar *emk-elisp-directory* "~/w/elisp")
(defvar *emk-3rd-party-elisp-directory*
  (concat *emk-elisp-directory* "/3rd-party"))
(defun push-3rd-party-elisp-directory (name)
  "Add a subdirectory of our 3rd-party ELISP directory to the load path."
  (setq load-path (cons (concat *emk-3rd-party-elisp-directory* "/" name)
                        load-path)))
(setq load-path
      (cons *emk-elisp-directory*
            (cons *emk-3rd-party-elisp-directory* load-path)))

;;;
;;; Load Modules
;;;

(load "emk-base")
(load "emk-commands")
(load "emk-os")
(load "git-tools")
(load "tdd")

;;;
;;; Active Features
;;;

(define-feature *package* t)
(define-feature *ledger* t)
(define-feature *select* t)
(define-feature *ruby* t)
(define-feature *javascript* t)
(define-feature *haskell* t)
(define-feature *predictive* t)
(define-feature *git* t)
(define-feature *project-root* t)
(define-feature *dylan* nil)
(define-feature *flex* t)
(define-feature *uim* nil)
(define-feature *ibus* nil)
(define-feature *fancy-editing* t)
(define-feature *rust-racer* t)

;;;
;;; Basic Global Customizations
;;;

;; Modes and other customizations.
(column-number-mode 1)                ; Show column numbers
(show-paren-mode 1)                   ; Highlight matching parens.
(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(setq flyspell-issue-welcome-flag nil) ; Work around a flyspell problem?
(safe-add-hook text-mode-hook activate-auto-fill-mode ()
  (auto-fill-mode 1)
  )
;;(resize-minibuffer-mode 1)
(line-number-mode 1)
;;(partial-completion-mode 1)
(setq-default indent-tabs-mode nil)   ; Always use spaces to indent
(setq-default fill-column 75)         ; Set a column for filling text
(setq next-line-add-newlines nil)     ; Don't insert newline at end of buffer!
(safe-add-items completion-ignored-extensions
  ".obj" ".d" ".fasl" ".pfsl" ".jlc" ".hi")
(setq show-trailing-whitespace t)
(setq create-lockfiles nil)           ; Disable lockfiles for broccoli.js.

;; Set up Emacs pacakge manager.
(when-feature *package*
  (require 'package)
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("marmalade" . "http://marmalade-repo.org/packages/")
                           ("melpa" . "http://melpa.milkbox.net/packages/")))
  (package-initialize))

;;(require 'editorconfig)
(require 'column-enforce-mode)
(global-column-enforce-mode t)        ; Display lines > 80 columns

;; Put Emacs backup files in a centralized location and make more of them.
;; See http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files
(setq backup-directory-alist `(("." . "~/.emacs-backups")))
(setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)

;; Disable font-lock-mode on the terminal, because the colors are never
;; right.
(unless window-system
  (global-font-lock-mode nil))

(safe-add-to-alist auto-mode-alist
  ("dotemacs\\'" . lisp-mode)
  ("\\.sgml\\'" . sgml-mode)
  ("\\.cs\\'" . java-mode) ; c-sharp
  ("\\.gs\\'" . gamescript-mode)
  )

;;;
;;; Custom Key Bindings
;;;

(global-set-key "\C-xf" 'find-file)   ; Do the Right Thing for common typo
(global-set-key "\C-cz" 'eshell)
(global-set-key "\C-ce" 'eval-region)
(global-set-key [?\s-e] 'eval-and-replace)
(global-set-key "\C-cm" 'man)
(global-set-key "\C-cw" 'ispell-word)
(global-set-key "\C-cr" 'rename-buffer)
(global-set-key "\C-ci" 'send-invisible)
(global-set-key "\C-cd" 'find-dotemacs)
(global-set-key "\C-ct" 'find-todo)
;;(global-set-key [?\s-a] 'anything)
(global-set-key "\M-\C-y" 'kill-ring-search)
(global-set-key "\C-ca" 'org-agenda)

;; Git-specific bindings.
(define-prefix-command 'git-tools)
(global-set-key "\C-cg" 'git-tools)
(global-set-key [?\H-g] 'magit-status)
(global-set-key "\C-cgs" 'magit-status)
(global-set-key "\C-cgk" 'gitk)
(global-set-key "\C-cgc" 'git-insert-credit)
(global-set-key "\C-cgb" 'git-blame-mode)
(global-set-key "\C-cgl" 'git-show-current-commit)
(global-set-key "\C-cgg" 'git-grep)

;; From emk-commands.el.
(global-set-key "\C-cc" 'insert-block-comment)
(global-set-key [?\H-r] 'ripgrep-project)

;;;
;;; Mode configuration.
;;;

;; Make snippets available to all modes.
(yas-global-mode t)

(when-feature *ledger*
  (autoload 'ledger-mode "ledger" "Mode for editing finacial ledgers" t)
  (safe-add-to-alist auto-mode-alist
    ("doc/kiddsoftware/.*\\.dat\\'" . ledger-mode)))

(when-feature *select*
  (load "select")
  (global-set-key [?\s-`] 'next-error)
  ;;(global-set-key [?\s-s] (select:make-switch-command '("ss" "scm")))
  (global-set-key [?\s-t] (select:make-switch-command '("txt"))))

(autoload 'halyard-mode
  (if (file-exists-p "~/src/halyard/tools/halyard.el")
      "~/src/halyard/tools/halyard.el"
    "~/src/iml/halyard/tools/halyard.el")
  "Mode for editing Halyard source code" t)

(safe-add-to-alist auto-mode-alist
  ("\\.ss\\'" . halyard-mode))

(autoload 'python-mode "python-mode" "Mode for editing Python files" t)
(safe-add-to-alist auto-mode-alist
  ("\\.py\\'" . python-mode))

(when-feature *ruby*
  ;; Rinari is hugely useful for nagivating around inside a Rails application.
  ;;(push-3rd-party-elisp-directory "rinari")
  ;;(require 'rinari)

  (safe-add-to-alist auto-mode-alist
    ("\\.rb\\'" . ruby-mode)
    ("Rakefile\\'" . ruby-mode)
    ("\\.rake\\'" . ruby-mode)
    ("Buildfile\\'" . ruby-mode)
    ("Gemfile\\'" . ruby-mode)
    ("Guardfile\\'" . ruby-mode)
    ("config\\.ru\\'" . ruby-mode)
    ("\\.rake\\'" . ruby-mode)
    ("\\.gemspec\\'" . ruby-mode)
    ("\\.rhtml\\'" . html-mode)
    ("\\.builder\\'" . ruby-mode)
    ("\\.css\\'" . css-mode)
    ("\\.scss\\'" . scss-mode)
    ("\\.scss.erb\\'" . scss-mode)
    ("\\.styl\\'" . css-mode)
    ("\\.yml\\'" . yaml-mode))

  (autoload 'ruby-mode "ruby-mode" "Mode for editing Ruby files" t)
  (autoload 'yaml-mode "yaml-mode" "Mode for editing YAML files" t)
  (autoload 'scss-mode "scss-mode" "Mode for editing SCSS files" t)
  )

(when-feature *javascript*
  (autoload 'js2-mode "js2" nil t)
  (safe-add-to-alist auto-mode-alist
    ("\\.js\\'" . js2-mode))
  )

(when-feature *haskell*
  (push-3rd-party-elisp-directory "haskell-mode-2.4")
  (load "haskell-site-file")
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent))

(when-feature *predictive*
  (push-3rd-party-elisp-directory "predictive")
  (autoload 'predictive-mode "predictive" "Predictive Input Mode" t))

(when-feature *git*
  (autoload 'git-blame-mode "git-blame" "Git blame mode" t))

(when-feature *project-root*
  (require 'project-root)

  ;; Configure our project types.
  (setq project-roots
        '(("Generic Git Project"
           :root-contains-files (".git")))
        )

  ;; A modified version of project-root-find-file from project-root.el.
  (defun project-root-ido-find-file ()
    "Find a file from a list of those that exist in the current project."
    (interactive)
    (with-project-root (call-interactively 'ido-find-file)))

  ;; Keybindings from project-root.el.
  (global-set-key (kbd "C-c p f") 'project-root-ido-find-file)
  (global-set-key (kbd "C-c p g") 'project-root-grep)
  (global-set-key (kbd "C-c p a") 'project-root-ack)
  (global-set-key (kbd "C-c p d") 'project-root-goto-root)
  (global-set-key (kbd "C-c p p") 'project-root-run-default-command)
  (global-set-key (kbd "C-c p M-x")
                  'project-root-execute-extended-command))

(when-feature *dylan*
   (autoload 'dylan-mode
     "~/src/gd/src/tools/elisp/dylan-mode"
     "Mode for editing Dylan files" t)
   (autoload 'auto-display-method-params
     "~/src/gd/src/tools/elisp/dylan-params"
     "Display Dylan method parameters" t)

   (safe-add-to-alist auto-mode-alist
      ("\\.dylan\\'" . dylan-mode)
      ("\\.intr\\'" . dylan-mode))
   (safe-add-hook dylan-mode-hook dylan-mode-customizations ()
     (font-lock-mode t)
     (local-set-key "(" 'auto-display-method-params))

   ;; Abbreviations for easy typing
   (defmacro define-dylan-abbrevs (&rest abbrevs)
     `(progn ,@(mapcar (lambda (x)
                         `(define-abbrev 'dylan-mode-abbrev-table ,x))
                       abbrevs))))
;   (define-dylan-abbrevs
;     ("dlib" "define library" nil 0)
;     ("dmod" "define module" nil 0)
;     ("dvar" "define variable" nil 0)
;     ("dcon" "define constant" nil 0)
;     ("dgen" "define generic" nil 0)
;     ("dmet" "define method" nil 0)
;     ("udyl" "use dylan;" nil 0)
;     ("dcla" "define class" nil 0)))

(when-feature *flex*
  (autoload 'actionscript-mode "actionscript-mode"
    "Edit ActionScript 3 source files" t)
  (safe-add-to-alist auto-mode-alist
    ("\\.as\\'" . actionscript-mode))
  )

(autoload 'wc-mode "wc-mode"
  "Count words in current buffer" t)

;; Set up UIM, the Universal Input Method, assuming it's installed in the
;; standard location.  Note that it may be necessary to launch Emacs as:
;;
;;   env XMODIFIERS= GTK_IM_MODULE= /usr/bin/emacs23 %F
;;
;; ...or something like that, to make sure that we only use our internal
;; version of UIM, and not the X11 or GTK version.  Trying to use both an
;; external and internal UIM typically breaks the Compose key, and prevents
;; me from typing in French.
(when-feature *uim*
  (setq load-path
        (cons "/usr/local/share/emacs/site-lisp/uim-el" load-path))
  (autoload 'uim-mode "uim"
    "Activate or deactivate Universal Input Method." t)
  (global-set-key "\C-cu" 'uim-mode)
  (add-hook 'uim-load-hook
            '(lambda ()
               (define-key uim-mode-map [67108896] nil)
               (define-key uim-mode-map [0] nil)))

  (defun hieroglyph-init ()
    "Set up hieroglyphs in Emacs."
    (interactive)
    (set-fontset-font "fontset-default" nil "Gardiner" nil 'append))
  (global-set-key "\C-ch" 'hieroglyph-init)
  )

(when-feature *ibus*
  (require 'ibus)
  (add-hook 'after-init-hook 'ibus-mode-on)
  (ibus-define-common-key ?\C-\s nil)
  (ibus-define-common-key ?\C-/ nil)
  (set-fontset-font "fontset-default" nil  '("Aegyptus" . "iso10646-1") nil 'append)
  (global-set-key "\C-cu" 'ibus-toggle)
  )

(when-feature *fancy-editing*
  (require 'multiple-cursors)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  ;; Don't forget C-x r y, which will yank all kill rings after mc has ended.
  (require 'ido-better-flex)
  (require 'projectile)
  (define-key projectile-mode-map [?\H-f] 'projectile-find-file)
  (projectile-global-mode)
  ;; Regular isearch doesn't like multiple-cursors.  But I don't especially
  ;; like phi-search (I'm too used to regular isearch), so only bind it
  ;; when I need it.
  (require 'phi-search)
  (define-key mc/keymap (kbd "C-s") 'phi-search)
  (define-key mc/keymap (kbd "C-r") 'phi-search-backward)
  )

;; Org-mode configuration.
(setq org-todo-keyword-faces
      '(("WAIT" . "blue") ("SENT" . "blue")))
(setq org-enforce-todo-dependencies t
      org-agenda-dim-blocked-tasks t
      org-agenda-tags-todo-honor-ignore-options t
      org-agenda-todo-ignore-scheduled 'future)

(put 'upcase-region 'disabled nil)

(setq magit-last-seen-setup-instructions "1.4.0")

(when-feature *rust-racer*
  (require 'rust-mode)
  ;; See https://github.com/racer-rust/emacs-racer
  (setq racer-rust-src-path
        (expand-file-name
         (if (eq system-type 'darwin)
             "~/.multirust/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src"
           "~/.multirust/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src")))
  (setenv "CARGO_HOME" (expand-file-name "~/.cargo"))
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode)
  (add-hook 'racer-mode-hook
            (lambda ()
              (add-to-list 'write-file-functions 'delete-trailing-whitespace)))
  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  (setq company-tooltip-align-annotations t))
