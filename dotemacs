;;;; .emacs for Eric Kidd
;;;;
;;;; This file dates back to the fall of 1997, when I first started using
;;;; Emacs in earnest.  There's a lot of old cruft in here, and most of it
;;;; is probably of no interest to anyone but me.
;;;;
;;;; A note about credit: At the time of writing, this file is 11.5 years
;;;; old.  During that time, I've attempted to keep records of where the
;;;; code snippets in this file originated, but I've undoutably overlooked
;;;; several smaller snippets.  So please don't assume that anything in
;;;; this file is necessarily mine, at least not without asking me first.
;;;; And if you see some code which isn't properly credited, please let me
;;;; know, and I'll fix it.

;;;
;;; Notes
;;;
;;; On emacs-snapshot-gtk, the nicest font is misc 11x18.
;;;

;;;
;;; Automatically-Created Customizations
;;; Emacs sets these automatically for us. Use M-x customize
;;;
;;; These go at the top of the file so that we can override fonts in
;;; emk-os.
;;;

(custom-set-variables
  ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(c-basic-offset 4)
 '(current-language-environment "UTF-8")
 '(indent-tabs-mode nil)
 '(whitespace-check-indent-whitespace nil)
 '(whitespace-global-mode nil nil (whitespace)))

(custom-set-faces
  ;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(default ((t (:stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 180 :width normal :family "adobe-courier"))))
 '(font-lock-comment-face ((((class color)) (:foreground "Firebrick"))))
 '(font-lock-function-name-face ((((class color)) (:foreground "DarkGreen"))))
 '(font-lock-reference-face ((((class color)) (:foreground "CadetBlue"))))
 '(font-lock-string-face ((((class color)) (:foreground "DarkGrey"))))
 '(font-lock-type-face ((((class color)) (:foreground "DarkOliveGreen"))))
 '(font-lock-variable-name-face ((((class color)) (:foreground "DarkGreen"))))
 '(mmm-default-submode-face ((t (:background "ivory2")))))

;;;
;;; Load Path Setup
;;;

(defvar *emk-elisp-directory* "~/w/elisp")
(defvar *emk-3rd-party-elisp-directory*
  (concat *emk-elisp-directory* "/3rd-party"))
(defun push-3rd-party-elisp-directory (name)
  "Add a subdirectory of our 3rd-party ELISP directory to the load path."
  (setq load-path (cons (concat *emk-3rd-party-elisp-directory* "/" name)
                        load-path)))
(setq load-path
      (cons *emk-elisp-directory*
            (cons *emk-3rd-party-elisp-directory* load-path)))

;;;
;;; Load Modules
;;;

(load "emk-base")
(load "emk-commands")
(load "emk-os")
(load "git-tools")

;;;
;;; Active Features
;;;

(define-feature *select* nil)
(define-feature *javascript* t)
(define-feature *planetary* t)
(define-feature *ruby* t)
(define-feature *slime* nil)
(define-feature *haskell* t)
(define-feature *predictive* t)
(define-feature *egg* t)
(define-feature *dylan* nil)

;;;
;;; Basic Global Customizations
;;;

;; Modes and other customizations.
(column-number-mode 1)                ; Show column numbers
(show-paren-mode 1)                   ; Highlight matching parens.
(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(safe-add-hook text-mode-hook activate-auto-fill-mode ()
  (auto-fill-mode 1)
  (flyspell-mode 1))
;;(resize-minibuffer-mode 1)
(line-number-mode 1)
(partial-completion-mode 1)
(setq-default indent-tabs-mode nil)   ; Always use spaces to indent
(setq-default fill-column 75)         ; Set a column for filling text
(setq next-line-add-newlines nil)     ; Don't insert newline at end of buffer!
(safe-add-items completion-ignored-extensions
  ".obj" ".d" ".fasl" ".pfsl" ".jlc" ".hi")
(setq show-trailing-whitespace t)

;;(autoload 'gamescript-mode "~/src/gamescript/gamescript.el"
;;  "Mode for editing GameScript source code" t)

(safe-add-to-alist auto-mode-alist
  ("dotemacs\\'" . lisp-mode)
  ("\\.sgml\\'" . sgml-mode)
  ("\\.xml\\'" . xml-mode)
  ("\\.cs\\'" . java-mode) ; c-sharp
  ("\\.gs\\'" . gamescript-mode)
  )

;;;
;;; Custom Key Bindings
;;;

(global-set-key "\C-xf" 'find-file)   ; Do the Right Thing for common typo
(global-set-key "\C-cz" 'shell)
(global-set-key "\C-cs" 'run-scheme)
(global-set-key "\C-ce" 'eval-region)
(global-set-key "\C-cm" 'man)
(global-set-key "\C-cw" 'ispell-word)
(global-set-key "\C-cr" 'rename-buffer)
(global-set-key "\C-ci" 'send-invisible)
(global-set-key "\C-cl" 'eval-last-sexp)
(global-set-key "\C-cp" 'eval-print-last-sexp)
(global-set-key "\C-cd" 'run-lisp)

;; Git-specific bindings.
(define-prefix-command 'git-tools)
(global-set-key "\C-cg" 'git-tools)
(global-set-key "\C-cgs" 'egg-status)
(global-set-key "\C-cgc" 'git-insert-credit)
(global-set-key "\C-cgb" 'git-blame-mode)
(global-set-key "\C-cgl" 'git-show-current-commit)

;; From emk-commands.el.
(global-set-key "\C-cb" 'switch-to-build-shell)
(global-set-key "\C-cc" 'insert-block-comment)

;;;
;;; C Support
;;;

(safe-add-hook c-mode-common-hook c-mode-common-customizations ()
  (setq c-basic-offset 4)
  (setq c-recognize-knr-p nil)
  (safe-add-to-alist c-offsets-alist
    (substatement-open . 0)
    (case-label . +)
    (label . -)
    (arglist-intro . +)
    (arglist-cont . 0)))

;;;
;;; Mode configuration.
;;;

;; My favorite Emacs completion mode.
(load "complete")

(when-feature *select*
  (load "select"))

(autoload 'halyard-mode "~/src/iml/halyard/tools/halyard.el"
  "Mode for editing Halyard source code" t)

(safe-add-to-alist auto-mode-alist
  ("\\.ss\\'" . halyard-mode))

(autoload 'python-mode "python-mode" "Mode for editing Python files" t)
(safe-add-to-alist auto-mode-alist
  ("\\.py\\'" . python-mode))

(when-feature *javascript*
  (autoload 'javascript-mode "javascript" nil t)
  (safe-add-to-alist auto-mode-alist
    ("\\.js\\'" . javascript-mode)))

(when-feature *planetary*
  (push "~/src/planetary/tools" load-path)
  (autoload 'jsr-mode "jsr" nil t)
  (safe-add-to-alist auto-mode-alist
    ("\\.jsr\\'" . jsr-mode)))

(when-feature *ruby*
  (safe-add-to-alist auto-mode-alist
    ("\\.rb\\'" . ruby-mode)
    ("Rakefile\\'" . ruby-mode)
    ("\\.rhtml\\'" . html-mode)
    ("\\.css\\'" . css-mode))

  (autoload 'ruby-mode "ruby-mode" "Mode for editing Ruby files" t)
  ;;(autoload 'css-mode
  ;;  "/usr/share/emacs21/site-lisp/css-mode/css-mode"
  ;;  "Mode for editing Ruby files" t)

  ;;(require 'generic-x)
  ;;add-to-list 'generic-extras-enable-list 'javascript-generic-mode)

  (push-3rd-party-elisp-directory "mmm-mode-0.4.8")
  (require 'mmm-auto)
  (setq mmm-global-mode 'maybe)

  (mmm-add-classes
   '((embedded-ruby
      :submode ruby-mode
      :face mmm-declaration-submode-face
      :front "<%"
      :back "%>")))

  (mmm-add-mode-ext-class nil "\\.html\\.erb\\'" 'embedded-ruby)
  
  )

(when-feature *slime*
  (setenv "SBCL_HOME" "/Applications/Editors/Lispbox/sbcl-0.9.7/lib/sbcl")
  (setq inferior-lisp-program
        (concat "/Applications/Editors/Lispbox/sbcl-0.9.7/bin/sbcl --core "
                "/Applications/Editors/Lispbox/sbcl-0.9.7/lib/sbcl/sbcl.core"))
  (push-3rd-party-elisp-directory "slime")
  (require 'slime)
  (slime-setup))

(when-feature *haskell*
  (push-3rd-party-elisp-directory "haskell-mode-2.4")
  (load "haskell-site-file")
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent))

(when-feature *predictive*
  (push-3rd-party-elisp-directory "predictive")
  (autoload 'predictive-mode "predictive" "Predictive Input Mode" t))

(when-feature *egg*
  (push-3rd-party-elisp-directory "egg")
  (require 'egg)
  (autoload 'git-blame-mode "git-blame" "Git blame mode" t)) 

(when-feature *dylan*
   (autoload 'dylan-mode
     "/home/emk/src/gd/src/tools/elisp/dylan-mode"
     "Mode for editing Dylan files" t)
   (autoload 'auto-display-method-params
     "/home/emk/src/gd/src/tools/elisp/dylan-params"
     "Display Dylan method parameters" t)

   (safe-add-to-alist auto-mode-alist
      ("\\.dylan\\'" . dylan-mode)
      ("\\.intr\\'" . dylan-mode))
   (safe-add-hook dylan-mode-hook dylan-mode-customizations ()
     (font-lock-mode t)
     (local-set-key "(" 'auto-display-method-params))

   ;; Abbreviations for easy typing
   (defmacro define-dylan-abbrevs (&rest abbrevs)
     `(progn ,@(mapcar (lambda (x)
                         `(define-abbrev 'dylan-mode-abbrev-table ,x))
                       abbrevs))))
;   (define-dylan-abbrevs
;     ("dlib" "define library" nil 0)
;     ("dmod" "define module" nil 0)
;     ("dvar" "define variable" nil 0)
;     ("dcon" "define constant" nil 0)
;     ("dgen" "define generic" nil 0)
;     ("dmet" "define method" nil 0)
;     ("udyl" "use dylan;" nil 0)
;     ("dcla" "define class" nil 0)))
