;;;; .emacs for Eric Kidd
;;;;

;;;; This file dates back to the fall of 1997, when I first started using
;;;; Emacs in earnest.  There's a lot of old cruft in here, and most of it
;;;; is probably of no interest to anyone but me.
;;;;
;;;; A note about credit: At the time of writing, this file is 11.5 years
;;;; old.  During that time, I've attempted to keep records of where the
;;;; code snippets in this file originated, but I've undoutably overlooked
;;;; several smaller snippets.  So please don't assume that anything in
;;;; this file is necessarily mine, at least not without asking me first.
;;;; And if you see some code which isn't properly credited, please let me
;;;; know, and I'll fix it.

;;;
;;; Notes
;;;
;;; On emacs-snapshot-gtk, the nicest font is misc 11x18.
;;;

;;;
;;; Automatically-Created Customizations
;;; Emacs sets these automatically for us. Use M-x customize
;;;
;;; These go at the top of the file so that we can override fonts in
;;; emk-os.
;;;

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(auto-install-directory "~/w/elisp/3rd-party/auto-install/")
 '(c-basic-offset 4)
 '(column-number-mode t)
 '(current-language-environment "UTF-8")
 '(display-time-mode t)
 '(ido-confirm-unique-completion t)
 '(ido-enable-dot-prefix t)
 '(ido-enable-flex-matching t)
 '(ido-mode (quote both) nil (ido))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(javascript-indent-level 2)
 '(menu-bar-mode nil)
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(whitespace-check-indent-whitespace nil)
 '(whitespace-global-mode nil nil (whitespace)))

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 98 :width normal :foundry "unknown" :family "DejaVu Sans Mono"))))
 '(font-lock-comment-face ((((class color)) (:foreground "Firebrick"))))
 '(font-lock-function-name-face ((((class color)) (:foreground "DarkGreen"))))
 '(font-lock-reference-face ((((class color)) (:foreground "CadetBlue"))))
 '(font-lock-string-face ((((class color)) (:foreground "DarkGrey"))))
 '(font-lock-type-face ((((class color)) (:foreground "DarkOliveGreen"))))
 '(font-lock-variable-name-face ((((class color)) (:foreground "DarkGreen"))))
 '(mmm-default-submode-face ((t (:background "ivory2")))))

;;;
;;; Load Path Setup
;;;

(defvar *emk-elisp-directory* "~/w/elisp")
(defvar *emk-3rd-party-elisp-directory*
  (concat *emk-elisp-directory* "/3rd-party"))
(defun push-3rd-party-elisp-directory (name)
  "Add a subdirectory of our 3rd-party ELISP directory to the load path."
  (setq load-path (cons (concat *emk-3rd-party-elisp-directory* "/" name)
                        load-path)))
(setq load-path
      (cons *emk-elisp-directory*
            (cons *emk-3rd-party-elisp-directory* load-path)))

;;;
;;; Load Modules
;;;

(load "emk-base")
(load "emk-commands")
(load "emk-os")
(load "git-tools")
(load "tdd")

;;;
;;; Active Features
;;;

(define-feature *auto-install* t)
(define-feature *select* t)
(define-feature *ruby* t)
(define-feature *javascript* t)
(define-feature *coffeescript* t)
(define-feature *planetary* t)
(define-feature *slime* nil)
(define-feature *haskell* t)
(define-feature *scala* t)
(define-feature *predictive* t)
(define-feature *git* t)
(define-feature *nxml* t)
(define-feature *cucumber* t)
(define-feature *project-root* t)
(define-feature *anything* t)
(define-feature *dylan* nil)

;;;
;;; Basic Global Customizations
;;;

;; Modes and other customizations.
(column-number-mode 1)                ; Show column numbers
(show-paren-mode 1)                   ; Highlight matching parens.
(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(safe-add-hook text-mode-hook activate-auto-fill-mode ()
  (auto-fill-mode 1)
  (flyspell-mode 1))
;;(resize-minibuffer-mode 1)
(line-number-mode 1)
(partial-completion-mode 1)
(setq-default indent-tabs-mode nil)   ; Always use spaces to indent
(setq-default fill-column 75)         ; Set a column for filling text
(setq next-line-add-newlines nil)     ; Don't insert newline at end of buffer!
(safe-add-items completion-ignored-extensions
  ".obj" ".d" ".fasl" ".pfsl" ".jlc" ".hi")
(setq show-trailing-whitespace t)

;; Disable font-lock-mode on the terminal, because the colors are never
;; right.
(unless window-system
  (global-font-lock-mode nil))

(safe-add-to-alist auto-mode-alist
  ("dotemacs\\'" . lisp-mode)
  ("\\.sgml\\'" . sgml-mode)
  ("\\.cs\\'" . java-mode) ; c-sharp
  ("\\.gs\\'" . gamescript-mode)
  )

;;;
;;; Custom Key Bindings
;;;

(global-set-key "\C-xf" 'find-file)   ; Do the Right Thing for common typo
(global-set-key "\C-cz" 'eshell)
(global-set-key "\C-ce" 'eval-region)
(global-set-key "\C-cm" 'man)
(global-set-key "\C-cw" 'ispell-word)
(global-set-key "\C-cr" 'rename-buffer)
(global-set-key "\C-ci" 'send-invisible)
(global-set-key "\C-cd" 'find-dotemacs)
(global-set-key [?\s-a] 'anything)

;; Git-specific bindings.
(define-prefix-command 'git-tools)
(global-set-key "\C-cg" 'git-tools)
(global-set-key [?\s-g] 'magit-status)
(global-set-key "\C-cgs" 'magit-status)
(global-set-key "\C-cgk" 'gitk)
(global-set-key "\C-cgc" 'git-insert-credit)
(global-set-key "\C-cgb" 'git-blame-mode)
(global-set-key "\C-cgl" 'git-show-current-commit)
(global-set-key "\C-cgg" 'git-grep)

;; From emk-commands.el.
(global-set-key "\C-cc" 'insert-block-comment)

;;;
;;; C Support
;;;

(safe-add-hook c-mode-common-hook c-mode-common-customizations ()
  (setq c-basic-offset 4)
  (setq c-recognize-knr-p nil)
  (safe-add-to-alist c-offsets-alist
    (substatement-open . 0)
    (case-label . +)
    (label . -)
    (arglist-intro . +)
    (arglist-cont . 0)))

;;;
;;; Mode configuration.
;;;

;; Set this up first, in case other code depends on it.
(when-feature *auto-install*
  (push-3rd-party-elisp-directory (concat "auto-install"))
  (require 'auto-install))

;; My favorite Emacs completion mode.
(require 'complete)

;; ido-style completion for command names.
;; Disabled because it causes errors on Ubuntu 10.10 Emacs 23.
;;(require 'smex)
;;(smex-initialize)

;; Make snippets available to all modes.
(require 'snippet)

(when-feature *select*
  (load "select")
  (global-set-key [?\s-`] 'next-error)
  ;;(global-set-key [?\s-s] (select:make-switch-command '("ss" "scm")))
  (global-set-key [?\s-t] (select:make-switch-command '("txt"))))

(autoload 'halyard-mode
  (if (file-exists-p "~/src/halyard/tools/halyard.el")
      "~/src/halyard/tools/halyard.el"
    "~/src/iml/halyard/tools/halyard.el")
  "Mode for editing Halyard source code" t)

(safe-add-to-alist auto-mode-alist
  ("\\.ss\\'" . halyard-mode))

(autoload 'python-mode "python-mode" "Mode for editing Python files" t)
(safe-add-to-alist auto-mode-alist
  ("\\.py\\'" . python-mode))

;;(autoload 'gamescript-mode "~/src/gamescript/gamescript.el"
;;  "Mode for editing GameScript source code" t)

(when-feature *ruby*
  ;; Rinari is hugely useful for nagivating around inside a Rails application.
  (push-3rd-party-elisp-directory "rinari")
  (require 'rinari)

  (safe-add-to-alist auto-mode-alist
    ("\\.rb\\'" . ruby-mode)
    ("Rakefile\\'" . ruby-mode)
    ("\\.rake\\'" . ruby-mode)
    ("Buildfile\\'" . ruby-mode)
    ("Gemfile\\'" . ruby-mode)
    ("config\\.ru\\'" . ruby-mode)
    ("\\.rake\\'" . ruby-mode)
    ("\\.rhtml\\'" . html-mode)
    ("\\.builder\\'" . ruby-mode)
    ("\\.css\\'" . css-mode)
    ("\\.yml\\'" . yaml-mode))

  (autoload 'ruby-mode "ruby-mode" "Mode for editing Ruby files" t)
  (autoload 'yaml-mode "yaml-mode" "Mode for editing YAML files" t)

  (push-3rd-party-elisp-directory "mmm-mode-0.4.8")
  (require 'mmm-auto)
  (setq mmm-global-mode 'maybe)

  (mmm-add-classes
   '((embedded-ruby
      :submode ruby-mode
      :face mmm-declaration-submode-face
      :front "<%"
      :back "%>")))

  (mmm-add-mode-ext-class nil "\\.html\\.erb\\'" 'embedded-ruby)

  (defun ruby-body-snippet (start)
    (concat start "\n$>$.\nend$>"))

  (define-abbrev-table 'ruby-mode-abbrev-table '())
  (snippet-with-abbrev-table 'ruby-mode-abbrev-table
    ("module" . (ruby-body-snippet "module $${Name}"))
    ("class" . (ruby-body-snippet "class $${Name}"))
    ("def" . (ruby-body-snippet "def $${name}"))
    ("if" . (ruby-body-snippet "if $${cond}"))
    ("for" . (ruby-body-snippet "for $${elem} in $${enumeration}"))
    ("it" . (ruby-body-snippet "it \"$${does something}\" do"))
    ("describe" . (ruby-body-snippet "describe $${Context} do"))
    ("before" . (ruby-body-snippet "before do"))
    )

  (defun inside-ruby-comment-p ()
    (save-excursion (beginning-of-line) (looking-at "\\s-*#")))

  (defun line-only-contains-abbrev-p ()
    (save-excursion (beginning-of-line) (looking-at "\\s-*\\S-+$")))

  (defun ruby-pre-abbrev-expand ()
    ;; This code is adapted from the snippet.el documentation.
    (setq local-abbrev-table
          (cond
           ((inside-ruby-comment-p) text-mode-abbrev-table)
           ((line-only-contains-abbrev-p) ruby-mode-abbrev-table)
           (t nil))))

  (defun ruby-snippet-setup ()
    (abbrev-mode 1)
    (make-variable-buffer-local 'pre-abbrev-expand-hook)
    (add-hook 'pre-abbrev-expand-hook 'ruby-pre-abbrev-expand))
  (add-hook 'ruby-mode-hook 'ruby-snippet-setup)

  )

(when-feature *javascript*
  (autoload 'js2-mode "js2" nil t)
  (safe-add-to-alist auto-mode-alist
    ("\\.js\\'" . js2-mode))

  (push-3rd-party-elisp-directory "sinasi")
  (require 'sinasi)
  (sinasi-bind-finders-with-prefix ?\s-s))

(when-feature *coffeescript*
  (push-3rd-party-elisp-directory "coffee-mode")
  (autoload 'coffee-mode "coffee-mode" nil t)
  (safe-add-to-alist auto-mode-alist
    ("\\.coffee\\'" . coffee-mode))
  ;; Coffee-mode has messed up tab-width handling, so fix it manually.
  (setq coffee-tab-width 2)
  (safe-add-hook coffee-mode-hook coffee-mode-customizations ()
    (set (make-local-variable 'tab-width) coffee-tab-width)))

(when-feature *planetary*
  (push "~/src/planetary/tools" load-path)
  (autoload 'jsr-mode "jsr" nil t)
  (safe-add-to-alist auto-mode-alist
    ("\\.jsr\\'" . jsr-mode)))

(when-feature *slime*
  (setenv "SBCL_HOME" "/Applications/Editors/Lispbox/sbcl-0.9.7/lib/sbcl")
  (setq inferior-lisp-program
        (concat "/Applications/Editors/Lispbox/sbcl-0.9.7/bin/sbcl --core "
                "/Applications/Editors/Lispbox/sbcl-0.9.7/lib/sbcl/sbcl.core"))
  (push-3rd-party-elisp-directory "slime")
  (require 'slime)
  (slime-setup))

(when-feature *haskell*
  (push-3rd-party-elisp-directory "haskell-mode-2.4")
  (load "haskell-site-file")
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent))

(when-feature *scala*
  (push-3rd-party-elisp-directory "scala")
  (require 'scala-mode-auto))

;; Google's "Go" language.
(when (file-exists-p "~/src/go/misc/emacs/go-mode-load.el")
  (setenv "GOROOT" "/Users/emk/src/go")
  (setenv "GOARCH" "386")
  (setenv "GOOS" "darwin")
  (setenv "GOBIN" "/opt/go/bin")
  (setenv "PATH" (concat (getenv "GOBIN") ":" (getenv "PATH")))

  (setq load-path (cons "~/src/go/misc/emacs/" load-path))
  (load "go-mode-load.el"))

(when-feature *predictive*
  (push-3rd-party-elisp-directory "predictive")
  (autoload 'predictive-mode "predictive" "Predictive Input Mode" t))

(when-feature *git*
  (push-3rd-party-elisp-directory "magit")
  (require 'magit)
  (autoload 'git-blame-mode "git-blame" "Git blame mode" t)) 

(when-feature *nxml*
  (push-3rd-party-elisp-directory "nxml-mode-20041004")
  (load "rng-auto")
  (autoload 'rnc-mode "rnc-mode" "RELAX NG Compact schema mode" t)
  (safe-add-to-alist auto-mode-alist
    ("\\.xml\\'" . nxml-mode)
    ("\\.xslt\\'" . nxml-mode)
    ("\\.rnc\\'" . rnc-mode)))

(when-feature *cucumber*
  (push-3rd-party-elisp-directory "cucumber")
  (autoload 'feature-mode "feature-mode" "Cucumber feature mode" t)
  (safe-add-to-alist auto-mode-alist
    ("\\.feature\\'" . feature-mode)))

(when-feature *project-root*
  (require 'project-root)

  ;; Configure our project types.
  (setq project-roots
        '(("Generic Git Project"
           :root-contains-files (".git")))
        )

  ;; A modified version of project-root-find-file from project-root.el.
  (defun project-root-ido-find-file ()
    "Find a file from a list of those that exist in the current project."
    (interactive)
    (with-project-root (call-interactively 'ido-find-file)))

  ;; Keybindings from project-root.el.
  (global-set-key (kbd "C-c p f") 'project-root-ido-find-file)
  (global-set-key (kbd "C-c p g") 'project-root-grep)
  (global-set-key (kbd "C-c p a") 'project-root-ack)
  (global-set-key (kbd "C-c p d") 'project-root-goto-root)
  (global-set-key (kbd "C-c p p") 'project-root-run-default-command)
  (global-set-key (kbd "C-c p M-x")
                  'project-root-execute-extended-command))

(when-feature *anything*
  ;; I'm just experimenting with this.  I don't actually know whether it's
  ;; useful yet.
  (autoload 'anything "anything" "Select anything and perform an action" t)
  (eval-after-load "anything"
    '(progn
       (require 'anything-config)
       (require 'anything-match-plugin)))

  (setq anything-sources
        '(anything-c-source-buffers+
          anything-c-source-file-name-history
          anything-c-source-imenu
          anything-c-source-files-in-current-dir+
          ;;project-root-anything-config-files - find broken
          anything-c-source-complex-command-history
          ;;anything-c-source-info-pages - broken
          anything-c-source-info-elisp
          anything-c-source-man-pages
          anything-c-source-lacarte
          anything-c-source-emacs-commands
          )))

(when-feature *dylan*
   (autoload 'dylan-mode
     "~/src/gd/src/tools/elisp/dylan-mode"
     "Mode for editing Dylan files" t)
   (autoload 'auto-display-method-params
     "~/src/gd/src/tools/elisp/dylan-params"
     "Display Dylan method parameters" t)

   (safe-add-to-alist auto-mode-alist
      ("\\.dylan\\'" . dylan-mode)
      ("\\.intr\\'" . dylan-mode))
   (safe-add-hook dylan-mode-hook dylan-mode-customizations ()
     (font-lock-mode t)
     (local-set-key "(" 'auto-display-method-params))

   ;; Abbreviations for easy typing
   (defmacro define-dylan-abbrevs (&rest abbrevs)
     `(progn ,@(mapcar (lambda (x)
                         `(define-abbrev 'dylan-mode-abbrev-table ,x))
                       abbrevs))))
;   (define-dylan-abbrevs
;     ("dlib" "define library" nil 0)
;     ("dmod" "define module" nil 0)
;     ("dvar" "define variable" nil 0)
;     ("dcon" "define constant" nil 0)
;     ("dgen" "define generic" nil 0)
;     ("dmet" "define method" nil 0)
;     ("udyl" "use dylan;" nil 0)
;     ("dcla" "define class" nil 0)))
