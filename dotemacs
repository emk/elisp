;;;; .emacs for Eric Kidd
;;;;
;;;; This file dates back to the fall of 1997, when I first started using
;;;; Emacs in earnest.  There's a lot of old cruft in here, and most of it
;;;; is probably of no interest to anyone but me.
;;;;
;;;; A note about credit: At the time of writing, this file is 11.5 years
;;;; old.  During that time, I've attempted to keep records of where the
;;;; code snippets in this file originated, but I've undoutably overlooked
;;;; several smaller snippets.  So please don't assume that anything in
;;;; this file is necessarily mine, at least not without asking me first.
;;;; And if you see some code which isn't properly credited, please let me
;;;; know, and I'll fix it.

;; Make elisp work more like Common Lisp.
(require 'cl)

;;;
;;; Notes
;;;
;;; On emacs-snapshot-gtk, the nicest font is misc 11x18.
;;;

;;;
;;; Basic Macros
;;;

(defmacro define-feature (feature flag)
  "Define a feature to allow conditional compilation with when-feature."
  (eval `(defvar ,feature ,flag))
  nil)

(defmacro when-feature (feature &rest body)
  "Do BODY if FEATURE is true."
  (if (eval feature) `(progn ,@body) nil))

(defmacro safe-add-to-alist (alist &rest entries)
  "Add items to an alist if they don't already have the proper values."
  `(dolist (item ',entries)
     (if (not (eq (cdr (assq (car item) ,alist))
		  (cdr item)))
	 (setq ,alist (cons item ,alist)))))

(defmacro safe-add-items (list &rest items)
  "Add items to the front of a list if they aren't already members."
  `(dolist (item ',items)
     (if (not (memq item ,list))
	 (setq ,list (cons item ,list)))))

(defmacro safe-add-hook (hook function args &rest body)
  "Add a function to a hook only if it is not already present."
  `(progn
     (defun ,function ,args ,@body)
     (add-hook ',hook ',function)))

;;;
;;; Elisp handling
;;;

(defmacro defindent (form value)
  ;; See lisp-mode.el for more information about how this works.
  `(put ',form 'lisp-indent-function ,value))

(defindent when-feature 1)
(defindent safe-add-to-alist 1)
(defindent safe-add-items 1)
(defindent safe-add-hook 3)
(defindent define-mail-abbrevs 0)
(defindent define-dylan-abbrevs 0)
(defindent eval-after-load 1)
(defindent letrec 1)

;;;
;;; Active Features
;;;

(define-feature *select* nil)
(define-feature *javascript* t)
(define-feature *planetary* t)
(define-feature *ruby* t)
(define-feature *slime* nil)
(define-feature *haskell* t)
(define-feature *predictive* t)
(define-feature *egg* t)
(define-feature *dylan* nil)

;;;
;;; Automatically-Created Customizations
;;; Emacs sets these automatically for us. Use M-x customize
;;;

(custom-set-variables
  ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(c-basic-offset 4)
 '(current-language-environment "UTF-8")
 '(indent-tabs-mode nil)
 '(whitespace-check-indent-whitespace nil)
 '(whitespace-global-mode nil nil (whitespace)))

(custom-set-faces
  ;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(default ((t (:stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 180 :width normal :family "adobe-courier"))))
 '(font-lock-comment-face ((((class color)) (:foreground "Firebrick"))))
 '(font-lock-function-name-face ((((class color)) (:foreground "DarkGreen"))))
 '(font-lock-reference-face ((((class color)) (:foreground "CadetBlue"))))
 '(font-lock-string-face ((((class color)) (:foreground "DarkGrey"))))
 '(font-lock-type-face ((((class color)) (:foreground "DarkOliveGreen"))))
 '(font-lock-variable-name-face ((((class color)) (:foreground "DarkGreen"))))
 '(mmm-default-submode-face ((t (:background "ivory2")))))

;;;
;;; Basic Global Customizations
;;;

;; Standard ELISP locations.
(defvar *emk-elisp-diretory* "~/w/elisp")
(defvar *emk-3rd-party-elisp-directory*
  (concat *emk-elisp-diretory* "/3rd-party"))
(defun push-3rd-party-elisp-directory (name)
  "Add a subdirectory of our 3rd-party ELISP directory to the load path."
  (setq load-path (cons (concat *emk-3rd-party-elisp-directory* "/" name)
                        load-path)))
(setq load-path
      (cons *emk-elisp-diretory*
            (cons *emk-3rd-party-elisp-directory* load-path)))

;; Modes and other customizations.
(column-number-mode 1)                ; Show column numbers
(show-paren-mode 1)                   ; Highlight matching parens.
(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(safe-add-hook text-mode-hook activate-auto-fill-mode ()
  (auto-fill-mode 1)
  (flyspell-mode 1))
;;(resize-minibuffer-mode 1)
(line-number-mode 1)
(partial-completion-mode 1)
(setq-default indent-tabs-mode nil)   ; Always use spaces to indent
(setq-default fill-column 75)         ; Set a column for filling text
(setq next-line-add-newlines nil)     ; Don't insert newline at end of buffer!
(safe-add-items completion-ignored-extensions
  ".obj" ".d" ".fasl" ".pfsl" ".jlc" ".hi")
(setq show-trailing-whitespace t)

;;(autoload 'gamescript-mode "~/src/gamescript/gamescript.el"
;;  "Mode for editing GameScript source code" t)

(defun switch-to-build-shell ()
  (interactive)
  (switch-to-buffer "*build*"))

(safe-add-to-alist auto-mode-alist
  ("\\.jl\\'" . lisp-mode)
  ("\\.esidl\\'" . java-mode)
  ("\\.sgml\\'" . sgml-mode)
  ("\\.xml\\'" . xml-mode)
  ("\\.cs\\'" . java-mode) ; c-sharp
  ("\\.gs\\'" . gamescript-mode)
  )


;;;
;;; Custom Key Bindings
;;;

(global-set-key "\C-xf" 'find-file)   ; Do the Right Thing for common typo
(global-set-key "\C-cz" 'shell)
(global-set-key "\C-cb" 'switch-to-build-shell)
(global-set-key "\C-cs" 'run-scheme)
(global-set-key "\C-ce" 'eval-region)
(global-set-key "\C-cm" 'man)
(global-set-key "\C-cw" 'ispell-word)
(global-set-key "\C-cr" 'rename-buffer)
(global-set-key "\C-ci" 'send-invisible)
(global-set-key "\C-cl" 'eval-last-sexp)
(global-set-key "\C-cp" 'eval-print-last-sexp)
(global-set-key "\C-cd" 'run-lisp)

;;;
;;; Operating-System-Specific Customizations
;;;

;; Customizations for Carbon Emacs on MacOS X.
(when (eq system-type 'darwin)
  ;; Taken from http://www.emacswiki.org/cgi-bin/wiki/MacOSTweaks .
  (defun jfb-set-mac-font (name size)
    (interactive
     (list (completing-read "font-name: "
                            (mapcar (lambda (p) (list (car p) (car p)))
                                    (x-font-family-list)) nil t)
           (read-number "size: " 12)))
    (set-face-attribute 'default nil 
                        :family name
                        :slant  'normal
                        :weight 'normal
                        :width  'normal
                        :height (* 10 size)))
  
  (tool-bar-mode 0) ;; The toolbar is useless.
  (setq mac-allow-anti-aliasing t) ;; or nil
  (jfb-set-mac-font "monaco" 13)
  ;; Make the keyboard menu work.  I think this has been fixed upstream.
  ;; http://groups.google.com/group/carbon-emacs/browse_thread/thread/b51921f9644b954c
  (when (condition-case nil
            (symbol-function mac-input-method-mode)
          (error nil))
    (mac-input-method-mode 1)))

;; On Windows, always assume that we have Cygwin.
;;
;; This may have been adapted, in part, from some Emacs Cygwin
;; documentation somewhere.
(when (or (eq system-type 'windows-nt)
          (eq system-type 'cygwin))
  ;; I always install Cygwin in Unix mode.
  (setq default-buffer-file-coding-system 'unix)

  ;; This assumes that Cygwin is installed in C:\cygwin (the
  ;; default) and that C:\cygwin\bin is not already in your
  ;; Windows Path (it generally should not be).
  (setq exec-path (cons "C:/cygwin/bin" exec-path))
  (setenv "PATH" (concat "C:\\cygwin\\bin;" (getenv "PATH")))
  
  ;; NT-emacs assumes a Windows command shell, which you change
  ;; here.
  (setq process-coding-system-alist '(("bash" . undecided-unix)))
  (setq shell-file-name "bash")
  (setenv "SHELL" shell-file-name) 
  (setq explicit-shell-file-name shell-file-name) 

  ;; This removes unsightly ^M characters that would otherwise
  ;; appear in the output of java applications.
  (add-hook 'comint-output-filter-functions
            'comint-strip-ctrl-m)

  ;; Add support for Cygwin-style pathnames.
  (require 'cygwin-mount)
  (cygwin-mount-activate))

;;;
;;; C Support
;;;

(safe-add-hook c-mode-common-hook c-mode-common-customizations ()
  (setq c-basic-offset 4)
  (setq c-recognize-knr-p nil)
  (safe-add-to-alist c-offsets-alist
    (substatement-open . 0)
    (case-label . +)
    (label . -)
    (arglist-intro . +)
    (arglist-cont . 0)))

;;;
;;; Mode configuration.
;;;

;; My favorite Emacs completion mode.
(load "complete")

(when-feature *select*
  (load "select"))

(autoload 'halyard-mode "~/src/iml/halyard/tools/halyard.el"
  "Mode for editing Halyard source code" t)

(safe-add-to-alist auto-mode-alist
  ("\\.ss\\'" . halyard-mode))

(autoload 'python-mode "python-mode" "Mode for editing Python files" t)
(safe-add-to-alist auto-mode-alist
  ("\\.py\\'" . python-mode))

(put 'downcase-region 'disabled nil)

(when-feature *javascript*
  (autoload 'javascript-mode "javascript" nil t)
  (safe-add-to-alist auto-mode-alist
    ("\\.js\\'" . javascript-mode)))

(when-feature *planetary*
  (push "~/src/planetary/tools" load-path)
  (autoload 'jsr-mode "jsr" nil t)
  (safe-add-to-alist auto-mode-alist
    ("\\.jsr\\'" . jsr-mode)))

(when-feature *ruby*
  (safe-add-to-alist auto-mode-alist
    ("\\.rb\\'" . ruby-mode)
    ("Rakefile\\'" . ruby-mode)
    ("\\.rhtml\\'" . html-mode)
    ("\\.css\\'" . css-mode))

  (autoload 'ruby-mode "ruby-mode" "Mode for editing Ruby files" t)
  ;;(autoload 'css-mode
  ;;  "/usr/share/emacs21/site-lisp/css-mode/css-mode"
  ;;  "Mode for editing Ruby files" t)

  ;;(require 'generic-x)
  ;;add-to-list 'generic-extras-enable-list 'javascript-generic-mode)

  (push-3rd-party-elisp-directory "mmm-mode-0.4.8")
  (require 'mmm-auto)
  (setq mmm-global-mode 'maybe)

  (mmm-add-classes
   '((embedded-ruby
      :submode ruby-mode
      :face mmm-declaration-submode-face
      :front "<%"
      :back "%>")))

  (mmm-add-mode-ext-class nil "\\.html\\.erb\\'" 'embedded-ruby)
  
  )

(when-feature *slime*
  (setenv "SBCL_HOME" "/Applications/Editors/Lispbox/sbcl-0.9.7/lib/sbcl")
  (setq inferior-lisp-program
        (concat "/Applications/Editors/Lispbox/sbcl-0.9.7/bin/sbcl --core "
                "/Applications/Editors/Lispbox/sbcl-0.9.7/lib/sbcl/sbcl.core"))
  (push-3rd-party-elisp-directory "slime")
  (require 'slime)
  (slime-setup))

(when-feature *haskell*
  (push-3rd-party-elisp-directory "haskell-mode-2.1")
  (load "haskell-site-file")
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent))

(when-feature *predictive*
  (push-3rd-party-elisp-directory "predictive")
  (autoload 'predictive-mode "predictive" "Predictive Input Mode" t))

(when-feature *egg*
  (push-3rd-party-elisp-directory "egg")
  (require 'egg))

(when-feature *dylan*
   (autoload 'dylan-mode
     "/home/emk/src/gd/src/tools/elisp/dylan-mode"
     "Mode for editing Dylan files" t)
   (autoload 'auto-display-method-params
     "/home/emk/src/gd/src/tools/elisp/dylan-params"
     "Display Dylan method parameters" t)

   (safe-add-to-alist auto-mode-alist
      ("\\.dylan\\'" . dylan-mode)
      ("\\.intr\\'" . dylan-mode))
   (safe-add-hook dylan-mode-hook dylan-mode-customizations ()
     (font-lock-mode t)
     (local-set-key "(" 'auto-display-method-params))

   ;; Abbreviations for easy typing
   (defmacro define-dylan-abbrevs (&rest abbrevs)
     `(progn ,@(mapcar (lambda (x)
                         `(define-abbrev 'dylan-mode-abbrev-table ,x))
                       abbrevs))))
;   (define-dylan-abbrevs
;     ("dlib" "define library" nil 0)
;     ("dmod" "define module" nil 0)
;     ("dvar" "define variable" nil 0)
;     ("dcon" "define constant" nil 0)
;     ("dgen" "define generic" nil 0)
;     ("dmet" "define method" nil 0)
;     ("udyl" "use dylan;" nil 0)
;     ("dcla" "define class" nil 0)))

;;;
;;; Block comments
;;;

(defun insert-block-comment ()
  (interactive)
  (insert-string (concat "/*=========================================="
			 "===============================\n**  "))
  (let ((title-point (point)))
    (insert-string (concat "\n**=========================================="
			   "===============================\n**  "))
    (let ((description-point (point)))
      (insert-string "\n*/")
      (set-mark description-point)
      (goto-char title-point))))

(global-set-key "\C-cc" 'insert-block-comment)

;;;
;;; Unwrapping lines (adapted from longlines.el by Kai Grossjohann and Alex
;;; Schroeder)
;;; 

(defun unwrap-region (start end &optional buffer)
  "Unwrap long lines in the region from START to END.
The region is assumed to contain short lines and soft and hard newlines.
Soft newlines and any following whitespace on the next line will be
replaced with exactly one space.

The optional argument BUFFER will be ignored.  It is assumed to exist
when the function is called via `format-alist'."
  (interactive "r")
  (save-excursion
    (goto-char start)
    (while (re-search-forward "\n[ \t]*" end t)
      (unless (get-text-property (match-beginning 0) 'hard)
        (replace-match " ")))
    (max end (point))))
 
(defun unwrap-paragraph ()
  "Unwrap all lines in the current paragraph."
  (interactive)
  (save-excursion
    (mark-paragraph)
    ;; I shouldn't really use MARK and POP-MARK in an editing command, but
    ;; that's the only way to get the output of MARK-PARAGRAPH.  Oh, well.
    (unwrap-region (+ (point) 1) (- (mark) 1))
    (pop-mark)))
